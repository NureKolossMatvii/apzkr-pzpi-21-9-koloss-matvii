Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Факультет комп’ютерних наук


Кафедра програмної інженерії


КУРСОВА ЗАПИСКА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Онлайн-каталог товарів та програма організації обліку


Студент гр. ПЗПІ-21-9 	 __________________ Колосс М.В.

Керівник роботи 	____________________ ст.викл.Сокорчук І.П.

Роботу захищено «__»________ 2024 р.
з оцінкою ________________________
Комісія: 	______________ доц. Лещинський В.О.
	________________ доц. Лещинська І.О.
	______________ ст.викл. Сокорчук І.П.



Хакрів 2024 
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук           Кафедра програмної інженерії	
Спеціальність 121 – Інженерія програмного забезпечення	
Курс        3        Семестр               6	
Навчальна дисципліна Архітектура програмного забезпечення	


ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ

_____________________Колоссу Матвію Віталійовичу	
1. Тема роботи:   «Онлайн-каталог товарів та програма організації обліку»				
2. Термін узгодження завдання курсової роботи «15» березня 2024 р.	
3. Термін здачі студентом закінченої роботи  «25» травня 2024 р.	
4. Вихідні дані до проекту (роботи): методичні вказівки до виконання лабораторних робіт, вимоги до системи, аркуш завдання до лабораторних робіт, рекомендації що до розробки.
5. Зміст пояснювальної записки (перелік питань, що належить розробити): ____Vision and Scope документ, звіт серверної частини, звіт системи адміністрування, звіт IoT системи, реалізація бази даних. __________________________
6. Перелік графічного матеріалу (з точним зазначенням обов’язкових креслень:  ER-діаграма, діаграма пакетів, діаграма розгортання, useCase діаграма.____________________________________________________________________________________________________________________________
 
КАЛЕНДАРНИЙ ПЛАН


Номер	Назва етапів курсової роботи	Строк виконання етапів роботи	Примітки
1	Функціональна специфікація
програмного проекту	21.04.2024 – 25.04.2024	Виконано
2	Проектування програмного
проекту	23.04.2024 – 25.04.2024	Виконано
3	Кодування програмного проекту	25.04.2024 – 01.05.2024	Виконано
4	Оформлення пояснювальної
записки	01.05.2024 – 04.05.2024	Виконано
5	Захист курсової роботи	30.05.2024	Виконано

Дата видачі завдання «30»  березня 2024 р.

Керівник 	 ______________ ст.викл.Сокорчук І.П.


Завдання прийняв для виконання
ст.гр. ПЗПІ-21-9 	 ___________ Колосс М.В.

. 
РЕФЕРАТ
Пояснювальна записка до курсової роботи: 33 с., 4 рис., 9 джерел.
АРТИКУЛ, БАЗА ДАНИХ SQL, ІНВЕНТАРИЗАЦІЯ, КАТАЛОГ ТОВАРІВ, КЛІЄНТСЬКА БАЗА, КОРИСТУВАЧ КАТАЛОГУ, ОБЛІКОВА СИСТЕМА, ПРОГРАМУВАННЯ НА C#, ПЛАТФОРМА .NET CORE, ASP.NET CORE, ENTITY FRAMEWORK CORE.
У процесі аналізу предметної галузі було виявлено ряд проблем, пов'язаних з управлінням та обліком товарів. Зростання асортименту товарів призвело до ускладнення процесів управління запасами та відстеження їх наявності. Традиційні методи обліку, такі як ручні записи чи неефективні електронні таблиці, виявилися недостатньо ефективними та призвели до помилок та втрати даних. Крім того, клієнти очікують швидкого та зручного доступу до інформації про товари, що вимагає наявності простого та інтуїтивно зрозумілого інтерфейсу для пошуку та замовлення товарів.
З метою вирішення цих проблем та оптимізації бізнес-процесів було прийнято рішення про розробку сучасної системи онлайн-каталогу товарів та програми організації обліку. Для реалізації цієї системи було сформульовано ряд вимог, серед яких важливими є забезпечення зручного і швидкого доступу до інформації, автоматизація процесів управління запасами та обліку товарів, а також можливість масштабування та адаптації до змін у бізнес-процесах.
У роботі над серверною частиною програмної системи було використано різноманітні технології та інструменти, серед яких основними є мова програмування C#, фреймворк ASP.NET Web API для створення RESTful API, а також ORM фреймворк Entity Framework для взаємодії з базою даних MS SQL Server. Використання цих технологій дозволило забезпечити оптимальну функціональність та продуктивність системи.

 
ЗМІСТ

Календарний план	3
Реферат	4
Зміст	5
Вступ	6
1 Аналіз предметної галузі	7
2 Постановка задачі	8
2.1 Основний функціонал системи	8
2.2 Допущення та залежності	10
2.3 Початковий випуск та наступні випуски	11
2.4 Обмеження та виключення	12
3 Формування вимог до програмної системи	13
3.1 Серверна частина системи	13
3.2 Frontend частина система	15
3.3 IoT частина системи	16
4 Структура бази даних	18
4.1 ER-моделювання	18
4.2 Реалізація бази даних	19
5 Особливості реалізації програмного забезпечення	21
5.1 Серверна частина	21
5.2 Frontend частина	22
5.3 IoT частина	23
6 Особоливості застосування	24
6.1 Веб-додаток	24
6.2 REST специфікація	26
Висновки	28
Перелік джерел посилання	29
Додаток А	30
А.1 метод GetFilterSpecification для організації обліку	30
А.2 метод GetFilterSpecification для клієнтів	31
А.3 метод Execute	31
Додаток Б	32
А.1 Функція конвертації convertImageLinkIntoFile	32
А.2 Функція getCategoryFullName	32
 
ВСТУП


У сучасному бізнес-середовищі зростає значення використання інформаційних технологій для оптимізації процесів управління та підвищення ефективності бізнес-процесів. Однією з ключових задач для багатьох компаній є управління товарними запасами та забезпечення зручного доступу клієнтів до інформації про товари. У зв'язку з цим виникає потреба в розробці сучасних програмних систем, які б допомагали вирішувати ці завдання.
У даному документі розглядається аналіз предметної галузі та формування вимог до програмної системи, яка спрямована на оптимізацію управління та обліку товарів. Це включає в себе аналіз поточних проблем управління запасами, вимог до програмної системи та обґрунтування використаних технологій для її розробки.
 
1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ


Передумови для розробки системи онлайн-каталогу товарів та програми організації обліку виникли в результаті аналізу поточних проблем та потреб бізнесу. Зі збільшенням асортименту товарів стає важче ефективно керувати запасами, відстежувати наявність товарів та своєчасно оновлювати інформацію. Поточні методи обліку, такі як ручні записи або неефективні електронні таблиці, призводять до помилок та втрати даних. Крім того, клієнти очікують швидкого та зручного доступу до інформації про товари, включаючи їх наявність та характеристики, що вимагає простого та інтуїтивно зрозумілого інтерфейсу для пошуку та замовлення товарів.
Конкуренція на ринку змушує компанії шукати нові способи підвищення ефективності та оптимізації бізнес-процесів. Впровадження сучасних технологій, таких як IoT та мобільні додатки, може забезпечити конкурентні переваги. Автоматизація процесів управління запасами та обліку товарів дозволить зменшити витрати на ручну працю та знизити ризик помилок. Інтеграція з платіжними системами та іншими зовнішніми сервісами сприятиме покращенню обслуговування клієнтів та прискоренню операцій.
Також важливо врахувати можливість розширення бізнесу та масштабування. Розробка системи, яка легко масштабується та адаптується до змін у бізнес-процесах, дозволить компанії швидко реагувати на ринкові зміни та розширювати свою діяльність. Враховуючи ці передумови, було прийнято рішення про розробку сучасної системи онлайн-каталогу товарів та програми організації обліку, яка відповідає потребам бізнесу та забезпечить високу ефективність і якість обслуговування клієнтів.
 
2 ПОСТАНОВКА ЗАДАЧІ


Поставимо мету курсової роботи: розробити Онлайн каталог та систему обліку товарів.


2.1 Основний функціонал системи


Розробка системи онлайн-каталогу товарів та програми організації обліку повинна відповідати низці важливих потреб клієнтів та ринку.
Потреби клієнта:
–	зручність та швидкість доступу до інформації: Клієнти очікують швидкого та легкого доступу до інформації про товари, включаючи наявність, ціни, характеристики та відгуки. Інтерфейс системи має бути інтуїтивно зрозумілим та зручним для користування як на стаціонарних, так і на мобільних пристроях;
–	надійність та безпека: Клієнти хочуть бути впевненими у безпеці своїх персональних даних та фінансових транзакцій. Система повинна забезпечувати високий рівень захисту даних, використовуючи сучасні методи шифрування та інші заходи кібербезпеки;
–	актуальність даних: Інформація про наявність товарів, їхні ціни та характеристики повинна постійно оновлюватися, щоб клієнти могли приймати обґрунтовані рішення щодо покупок;
–	широкий асортимент товарів: Клієнти очікують знайти в онлайн-каталозі широкий вибір товарів;
–	простота замовлення та оплати: Процес замовлення товарів повинен бути максимально спрощеним, з можливістю вибору різних методів оплати та доставки;
–	швидка та надійна доставка: Клієнти очікують швидкої та надійної доставки замовлених товарів. Система повинна підтримувати різні варіанти доставки та надавати клієнтам можливість відстежувати свої замовлення в режимі реального часу;
–	підтримка клієнтів: Важливою потребою є наявність ефективної системи підтримки клієнтів, яка допомагатиме вирішувати питання та проблеми, що можуть виникнути під час користування онлайн-каталогом;
–	персоналізація та рекомендації: Клієнти цінують персоналізований підхід та рекомендації на основі їхніх попередніх покупок та вподобань;
–	ціноутворення та акції: Конкурентні ціни та регулярні акції є важливими для залучення та утримання клієнтів.
Потреби адміністратора:
–	зручність керування товарними позиціями: Адміністратори потребують зручного інтерфейсу для додавання, редагування та видалення товарних позицій в каталозі;
–	автоматизація процесів обліку: Система повинна забезпечувати автоматизацію обліку запасів, моніторинг наявності товарів та генерацію звітів про продажі;
–	інтеграція з базами даних: Система повинна інтегруватися з існуючими базами даних та іншими внутрішніми системами для забезпечення актуальності даних;
–	безпека та контроль доступу: Адміністратори потребують розширених можливостей контролю доступу та управління правами користувачів, забезпечуючи безпеку системи та захист даних;
–	підтримка масштабованості: Система повинна бути здатна обробляти зростаючу кількість товарів та транзакцій без зниження продуктивності;
–	аналітика та звітність: Адміністратори потребують доступу до детальних аналітичних звітів та можливості моніторингу ключових показників ефективності в режимі реального часу;
–	гнучке ціноутворення: Система повинна підтримувати можливість встановлення різних цінових стратегій та проведення маркетингових кампаній;
–	інтеграція з платіжними системами: Система повинна забезпечувати інтеграцію з різними платіжними системами для зручності обробки фінансових транзакцій;
–	підтримка та оновлення системи: Адміністратори потребують регулярних оновлень та технічної підтримки для забезпечення безперебійної роботи системи.


2.2 Допущення та залежності


У процесі розробки онлайн-каталогу товарів та програми обліку важливо враховувати різноманітні фактори, які можуть вплинути на їхню функціональність та результативність. Ось кілька ключових припущень та залежностей:
–	технічні можливості: Реалізація системи обмежена технічними характеристиками та можливостями доступного програмного забезпечення;
–	інтеграція з існуючими системами: Необхідно взаємодіяти з існуючими програмами та сервісами для забезпечення сумісності та обміну даними;
–	потреби користувачів: Розуміння та врахування потреб та очікувань користувачів для забезпечення зручного та інтуїтивно зрозумілого інтерфейсу;
–	захист даних: Забезпечення безпеки та конфіденційності даних користувачів шляхом використання відповідних методів шифрування та захисту;
–	вимоги законодавства: Дотримання вимог щодо захисту персональних даних та інших аспектів, встановлених законодавством;
–	фінансові ресурси: Планування та реалізація системи обмежена фінансовими ресурсами, що може вплинути на обсяг робіт та можливості розширення;
–	географічні особливості: Врахування географічних та кліматичних особливостей регіону для забезпечення адаптивності системи до місцевих умов.


2.3 Початковий випуск та наступні випуски


У першому етапі випуску онлайн-каталогу товарів та програми обліку передбачається наступне:
–	управління товарами: Додавання, редагування та видалення товарів з каталогу;
–	управління категоріями: Додавання, редагування та видалення категорій;
–	каталог для перегляду товарів с можливістю пошуку та фільтрацією за категорією товару;
–	перегляд детальної інформації про товар, включаючи фотографії товару;
–	можливість замовлення через сторонній ресурс, на який буде посилання на самому сайті;
–	модуль для фінансового обліку: Введення системи обліку фінансів, включаючи оплату, виставлення рахунків та звітність.
У подальших випусках система буде розширюватися за такими напрямками:
–	управління замовленнями: Обробка замовлень, відстеження статусу та адміністрування замовлень;
–	управління клієнтською базою: Зберігання та оновлення інформації про клієнтів;
–	розширення функціоналу продукту: Додавання функцій, таких як рекомендації товарів, огляди клієнтів та інші;
–	інтеграція з платіжними системами: Підтримка різноманітних платіжних систем для зручності користувачів під час оплати покупок.


2.4 Обмеження та виключення


Під час розробки системи онлайн-каталогу товарів та програми обліку слід враховувати такі обмеження:
–	обмеження кількості пристроїв відстеження: Кожен товар може мати лише один пристрій відстеження його розташування;
–	необхідність кількох пунктів продажу: Для оптимального обслуговування клієнтів кожен товар повинен бути доступний у кількох пунктах продажу;
–	асоціація товарів із категоріями: Кожен товар повинен бути призначений до певної категорії для зручного пошуку та навігації користувачів;
–	необхідність послідовності: Продукція повинна бути виставлена на сайті відповідно до послідовності її додавання, щоб забезпечити логічний порядок для покупців.
 
3 ФОРМУВАННЯ ВИМОГ ДО ПРОГРАМНОЇ СИСТЕМИ
3.1 Серверна частина системи


Під час розробки серверної частини програмної системи, було використано різноманітні технології та інструменти для забезпечення оптимальної функціональності та продуктивності системи. Основна мова програмування була C#, що дозволило створити потужні та ефективні компоненти системи.
Основним фреймворком, було використано для створення RESTful API, був ASP.NET Web API [2]. Використання цього фреймворку дозволило легко створювати веб-сервіси, які надають доступ до даних та функціональності системи через HTTP-протокол.
Для взаємодії з базою даних було обрано Entity Framework - ORM фреймворк для .NET. Entity Framework [3] спростив процес взаємодії з базою даних MS SQL Server [4], дозволяючи швидко та ефективно виконувати операції з даними.
Додатково, було використано інші технології та інструменти, такі як LINQ для роботи з колекціями даних, сервіси маршрутизації для керування запитами, а також різноманітні бібліотеки та компоненти для забезпечення безпеки даних та автентифікації користувачів.
Перед тим як перейдемо до аналізу діаграми пакетів, треба коротко описати організацію компонентів програмної системи. Діаграма пакетів відображає високорівневу структуру системи, де компоненти групуються в окремі модулі або пакети. Це дозволяє нам краще розуміти, як компоненти системи організовані та як вони взаємодіють між собою. Звернемося до діаграми (див. рис. 3.1), щоб отримати більше інформації про структуру нашого програмного забезпечення.

 
Рисунок 3.1 – Діаграма пакетів

Діаграма розгортання нижче (див. рис. 3.2) ілюструє архітектуру системи та взаємодію між її основними компонентами.

 
Рисунок 1.4 – Діаграма розгортання

У цьому розділі було детально розглянули серверну частину системи онлайн-каталогу та обліку товарів. 
3.2 Frontend частина система


У цьому розділі ми розглянемо процес створення інтерфейсу для організації обліку та онлайн-каталогу товарів в рамках нашої системи. Цей інтерфейс складається з двох основних етапів: панель адміністрування та сам каталог, доступний для клієнтів.
Почнемо з панелі адміністрування. Для входу в неї користувач повинен авторизуватися в системі, використовуючи власний обліковий запис. У нашій системі існують дві ролі: менеджер та адміністратор.
Перша сторінка, яку ми розглянемо, — це сторінка з товарами. Вона доступна для менеджерів та адміністраторів і дозволяє переглядати, додавати, редагувати та видаляти товари з каталогу. На цій сторінці реалізована система пагінації для зручності навігації, оскільки кількість товарів може бути значною. При додаванні нового товару користувач може завантажити до 10 фотографій, які будуть відображатися на сторінці.
Друга сторінка — це категорії товарів. Вона також доступна для менеджерів та адміністраторів і дозволяє додавати, редагувати та видаляти категорії товарів. Категорії в системі допомагають у зручному пошуку товарів та можуть бути організовані як батьківські та дочірні категорії.
Сторінка сайтів призначена для адміністрування та доступна менеджерам та адміністраторам. Вона дозволяє прив'язувати товари до різних сайтів, таких як Ebay або OLX, що полегшує управління та моніторинг присутності товарів на різних платформах.
Сторінка користувачів доступна тільки адміністратору і дозволяє керувати обліковими записами менеджерів, включаючи створення нових облікових записів, редагування паролів та видалення користувачів.
Тепер перейдемо до самого каталогу. Каталог містить дві сторінки: сторінку товарів та сторінку перегляду окремого товару.
На сторінці товарів користувач може скористатися системою пагінації, а також здійснити пошук товарів за назвою або фільтрувати їх за категорією.
На сторінці перегляду товару клієнт може ознайомитися з описом товару, його характеристиками та подивитися фотографії.


3.3 IoT частина системи


У сучасному роздрібному бізнесі технології Інтернету речей (IoT) відіграють вирішальну роль у підвищенні ефективності обслуговування клієнтів та оптимізації внутрішніх процесів. Однією з інноваційних розробок є система інтерактивних електронних цінників, яка інтегрована з онлайн-каталогом та системою обліку товарів. Ця система дозволяє автоматизувати процес відображення актуальної інформації про товари, підвищуючи точність та зручність для користувачів.
Розроблена IoT система складається з декількох ключових компонентів, які забезпечують її функціональність та ефективність:
–	електронні цінники, які розміщуються безпосередньо на полицях магазинів поруч з товарами, є основним елементом системи. Ці пристрої оснащені дисплеями, що відображають інформацію про товар, таку як назва та ціна. Вони використовують технології електронного чорнила (e-ink) або рідких кристалів (LCD), що забезпечує високу якість зображення та низьке енергоспоживання;
–	центральний сервер є основним обчислювальним вузлом системи. Він приймає запити від електронних цінників, обробляє їх та взаємодіє з базою даних онлайн-каталогу та системи обліку товарів. Серверна частина розроблена з використанням мови програмування C# [1] та фреймворку ASP.NET Web API [2], що дозволяє створювати потужні та масштабовані веб-сервіси;
–	база даних, побудована на платформі MS SQL Server [4], містить всю необхідну інформацію про товари. Вона включає унікальні ідентифікатори (ID) товарів, назви, ціни, описи, кількість на складі та інші атрибути. Для взаємодії з базою даних використовується Entity Framework [3], що спрощує виконання операцій з даними та забезпечує високу продуктивність системи.
Принцип роботи системи.
Процес починається з введення користувачем унікального ID товару. Це може бути здійснено шляхом сканування штрих-коду або QR-коду за допомогою мобільного пристрою, або ручним введенням ID через інтерфейс електронного цінника.
Зчитані дані передаються через комунікаційний модуль до центрального сервера. Використання сучасних протоколів зв'язку забезпечує швидку та надійну передачу даних без затримок.
Центральний сервер отримує запит, обробляє його та звертається до бази даних для отримання інформації про товар. За допомогою Entity Framework [3] сервер швидко знаходить необхідні дані, включаючи назву товару та його актуальну ціну.
Отримана інформація повертається до комунікаційного модуля та передається на відповідний електронний цінник. Дисплей цінника автоматично оновлюється, відображаючи актуальну назву товару та його ціну для зручності користувача.
Інформація відображається на екрані електронного цінника, що забезпечує високий рівень видимості та читабельності. Завдяки використанню технології електронного чорнила або рідких кристалів, дані чітко видно навіть при яскравому освітленні.
 
4 СТРУКТУРА БАЗИ ДАНИХ
4.1 ER-моделювання


Створення та організація бази даних є ключовим етапом у розробці системи "Онлайн-каталог та програма організації обліку". Це важливий аспект, що впливає на ефективність та продуктивність системи. Дана база даних складатиметься з низки таблиць, які будуть взаємодіяти між собою через ключі.
Щоб зрозуміти структуру даних та їх взаємозв'язки у системі "Онлайн-каталог та програма організації обліку", використовується ER-діаграма. Ця діаграма складається з різних елементів, які ілюструють ключові сутності, їх властивості та зв'язки між ними. Завдяки ER-діаграмі можна зрозуміти, як дані організовані та як вони взаємодіють один з одним у рамках системи. Дана діаграма зображена на рисунку 4.1.

 
Рисунок 1.2 - ER-діаграма

Після аналізу ER-діаграми стало зрозуміло, що структура бази даних системи "Онлайн-каталог та програма організації обліку" має чіткі взаємозв'язки між ключовими сутностями. Ця діаграма надає важливу інформацію про те, як дані організовані та взаємодіють у межах системи, що допомагає забезпечити ефективну роботу програмного забезпечення. З її допомогою розробники та адміністратори можуть краще розуміти структуру системи та вносити необхідні зміни для її вдосконалення.


4.2 Реалізація бази даних


Перелік атрибутів для кожної сутності:
–	адміністратор: користувач_id, логін, пароль, роль. Первинний ключ: користувач_id;
–	товар: id, назва, опис, артикул, опубліковано, ціна покупки, ціна продажу, трек номер, локація, посилання на інстаграм, продано, дата створення, дата редагування. Первинний ключ: id;
–	категорія: id, назва, батьківська категорія. Первинний ключ: id;
–	зображення: id, індекс, товар. Первинний ключ: id;
–	сайт: id, назва, товар. Первинний ключ: id.
Зв’язки бази даних:
–	“товар – категорія” – тип зв’язку багато до багатьох. Кожен товар може мати кілька категорій, а категорія може бути у багатьох товарах;
–	“зображення – товар” – тип зв’язку один до багатьох. Кожен товар може мати багато фотографій;
–	“товар – сайт” – тип зв’язку один до багатьох. Товар може мати багато сайтів, а сайт може бути у багатьох товарах.
Під час проведення аналізу атрибутів для різних сутностей та встановлення зв'язків між ними, основним акцентом були функціональні потреби користувачів системи "Онлайн-каталог та програма організації обліку". Цей процес мав на меті не лише визначення технічних аспектів структури бази даних, але й зрозуміння того, як саме дані взаємодіють між собою та як ця взаємодія впливає на функціональність та зручність користування системою для кінцевих користувачів.
Проведений аналіз допоміг ідентифікувати ключові атрибути кожної сутності, їх зв'язки та взаємодію в межах системи. Враховуючи потреби різних типів користувачів. Було важливо забезпечити, щоб дані були структуровані та організовані таким чином, щоб вони були легко доступні та зрозумілі для всіх сторін.
За допомогою цього аналізу ми змогли визначити оптимальну структуру бази даних, яка відповідає потребам користувачів і забезпечує ефективну та зручну роботу системи в цілому. Такий підхід дозволить побудувати систему, яка відповідає вимогам користувачів і забезпечує їх задоволення від використання продукту.
 
5 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ ПРОГРАМНОГО ЗАБЕЗПЕЧЕННЯ
5.1 Серверна частина


У розробці серверної частини програмної системи на базі ASP.NET Web API [2] були використані контролери для обробки та маршрутизації HTTP-запитів.
Контролери відповідають за приймання запитів від клієнтів, обробку їх та повернення відповідей. Кожен контролер містить методи, які виконують певні дії відповідно до отриманих запитів.
Для системи "Онлайн-каталог та програма організації обліку" були створені контролери для управління товарами, категоріями тощо. Кожен контролер може містити методи, такі як GET, POST, PUT, DELETE, які відповідають різним HTTP-запитам та забезпечують необхідну функціональність.
Система призначена для забезпечення зручного та ефективного управління товарними запасами та фінансовими операціями компанії. Вона поєднує в собі онлайн-каталог для перегляду товарів з програмою обліку для автоматизації облікових процесів.
Для фільтрації товарів у системі організації обліку було розроблено метод GetFilterSpecification (див. додаток А.1). Цей метод у майбутньому потрібен для того щоб знайти товари за назвою, трек номером, артиклем, локацією, описом, а також відфільтрувати товари.
Для фільтрації товарів для користувачів розроблено метод GetFilterSpecification. Цей метод відрізняється від попереднього тим, що він знаходиться у іншому спеціальному класі та своєю унікальною фільтрацією та пошуком товару. Метод показано у додатку А.2.
Дані два методи використовуються у методі Execute (див. додаток. А.3) і потрібен він для виводу товарів, які вже відфільтровані, просортовані тощо. Метод повертає відповідь з атрибутом PageItems – це власно і є товари та ItemsCount – кількість всіх відфільтрованих товарів (потрібно для пагінації).


5.2 Frontend частина


При розробці клієнтської частини системи я використовував ряд сучасних технологій для забезпечення ефективності та функціональності інтерфейсу. Основною технологією, яку я використовував, був React.js [5], який дозволяє створювати динамічні та високопродуктивні веб-додатки. Використання React [5] дозволило швидко реагувати на зміни даних та забезпечити інтерактивність користувачеві. Для забезпечення безпеки та надійності використовував TypeScript [6], який надає статичну типізацію та допомагає у виявленні помилок на етапі розробки.
Також, для кращої організації коду та його модульності, використовував компонентний підхід у розробці інтерфейсу, розділяючи його на невеликі, незалежні компоненти. Для управління станом додатку та зв'язку між компонентами використовував бібліотеку управління станом MobX [8]. Щоб забезпечити адаптивність інтерфейсу та оптимізувати його для різних пристроїв та розмірів екрану, використовував CSS для стилів. Для роботи з асинхронними запитами до сервера та обміну даними в реальному часі використовував технологію axios. На рівні розробки інтерфейсу також використовував інструменти для збірки та оптимізації коду, такі як Webpack або Parcel, для забезпечення швидкої та ефективної роботи додатку в реальному середовищі. Використання цих технологій допомогло створити сучасний та ефективний інтерфейс для системи онлайн-каталогу та програми організації обліку.
Крім того, для реалізації мультиязичності та локалізації сторінок була використана бібліотека i18n [7]. Це дозволило легко налаштовувати переклади інтерфейсу для різних мов та регіонів, забезпечуючи зручність використання додатку для користувачів з різних країн та культур. Реалізація мультиязичності за допомогою бібліотеки i18n [7] сприяла покращенню доступності та дослідженню нових ринків. Такий підхід дозволяє зробити додаток більш глобальним та привабливим для різних аудиторій.
Існує метод convertImageLinkIntoFile (див. додаток Б.1) і потрібен він для конвертації зображення з посилання у Blob, а далі у файл для редагування товару та його зображень.
Функція getCategoryFullName потрібна для отримання назви категорії в залежності від вибраної мови на сайті. Функція показано у додатку Б.2.


5.3 IoT частина


Основна мета цієї системи - забезпечити зручний доступ до інформації про товари, автоматизоване управління запасами та підвищення рівня обслуговування клієнтів.
Для реалізації цієї системи використовуються сучасні технології, такі як .NET і WinForms [9]. Це означає, що програмна частина буде розроблятися з використанням мов програмування, що підтримуються цими технологіями, а також інструментарієм, який надається для розробки відповідних додатків.
У результаті роботи очікується створення функціональної і ефективно працюючої системи, яка дозволить зручно керувати товарами, автоматизувати процеси управління запасами і, в кінцевому підсумку, підвищити якість обслуговування клієнтів.
WinForms [9] тут використовується для емуляції процесу відображення цін товарів.
 
6 ОСОБОЛИВОСТІ ЗАСТОСУВАННЯ
6.1 Веб-додаток


Для розуміння функціональних можливостей системи та її взаємодії з користувачами була побудована Use Case діаграма (див. рис. 6.1).

 
Рисунок 6.1 – Use-case діаграма

У системі існує роль адміністратора та роль менеджера. Для розуміння що робить кожна роль, було розписано таблицю 6.1.






Таблиця 6.1 – Ролі системи
Адміністратор	Обліковий запис: вхід до облікового запису, вихід з облікового запису, створення облікового запису менеджера, зміна паролю, видалення менеджерів.
Товари: створення товарів, видалення товарів, редагування товарів, пошук товарів та їх фільтрація, звітність заробітної плати.
Категорії: створення категорій товару, редагування категорій товару, видалення категорій, пошук категорій.
Сайти: створення сайтів, редагування сайтів, видалення сайтів.
Менеджер	Обліковий запис: вхід до облікового запису, вихід з облікового запису.
Товари: створення товарів, видалення товарів, редагування товарів, пошук товарів та їх фільтрація, звітність заробітної плати.
Категорії: створення категорій товару, редагування категорій товару, видалення категорій, пошук категорій.





Продовження таблиці 6.1
	Сайти: створення сайтів, редагування сайтів, видалення сайтів.
Клієнти	Перегляд каталогу товару з можливістю пошуку за найменуванням та фільтрацією за категорією товару.

Проаналізуємо таблицю 6.1. Адміністратори та менеджери можуть входити до облікового запису, для цього потрібно ввести логін та пароль. Однак адміністратор може створити акаунт для менеджера, який у свою чергу у майбутньому може розпочати сесію для створення товарів, редагування тощо.
У системі авторизації використано роботу з токенами, а саме JSON Web Token, який зберігає у собі інформацію про сесію та дані користувача, які вказав розробник, у даній системі це: логін та роль. Використання JWT токену забезпечує безпеку облікового запису.


6.2 REST специфікація


Продукти для адміністратора:
–	GET /api/AdminProducts – отримати товари;
–	POST /api/AdminProducts – створити товар;
–	PUT /api/AdminProducts – відредагувати товар;
–	GET /api/AdminProducts/article – генерація артикуля.
Авторизація:
–	POST /api/Auth/signIn – увійти в обліковий запис;
–	POST /api/Auth/registerManager – реєстрація менеджера;
–	DELETE /api/Auth/{login} – видалити обліковий запис;
–	PATCH /api/Auth – зміна паролю;
–	POST /api/Auth/checkToken – перевірка токену авторизації.
Категорія:
–	GET /api/Categories/ – отримати усі категорії;
–	POST /api/Categories – створити категорію;
–	PUT /api/Categories – відредагувати категорію;
–	GET /api/Categories/withoutParent – отримати категорії, які немає батьківської категорії;
–	DELETE /api/Categories/{id} – видалити категорію.
Зображення:
–	GET /api/Image/{id} – отримати зображення;
–	POST /api/Image/{id} – створити зображення.
Сайти:
–	GET /api/Sites – отримати усі сайти;
–	POST /api/Sites – створити сайт;
–	PUT /api/Sites – редагування сайту;
–	DELETE /api/Sites/{id} – видалити сайт;
Продукти для клієнта:
–	GET /api/UserProducts/{id} – отримати товар за ідентифікатором;
–	GET /api/UserProducts – отримати усі товари;

 
ВИСНОВКИ


У ході виконання курсової роботи було проведено аналіз предметної галузі, пов'язаної з управлінням та обліком товарів. Зазначено, що зростання асортименту товарів та збільшення вимог клієнтів до швидкості та зручності обслуговування створюють потребу у впровадженні сучасних програмних систем.
Результати аналізу свідчать про необхідність розробки програмної системи, спрямованої на оптимізацію управління та обліку товарів. При цьому висунуто ряд вимог до системи, серед яких ключовими є забезпечення швидкого та зручного доступу до інформації, автоматизація процесів управління запасами та можливість масштабування та адаптації до змін у бізнес-процесах.
У процесі розробки серверної частини програмної системи були використані сучасні технології, такі як мова програмування C# [1], фреймворк ASP.NET Web API [2] та ORM фреймворк Entity Framework [3]. Це дозволило створити потужні та ефективні компоненти системи, які забезпечують оптимальну функціональність та продуктивність.
Отже, розробка та впровадження програмної системи для управління та обліку товарів є актуальним та перспективним напрямком розвитку для підприємств. Використання сучасних технологій дозволяє підвищити ефективність бізнес-процесів та забезпечити конкурентні переваги на ринку.

 
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1. C# [Електронний ресурс] – Режим доступу до ресурсу: https://learn.microsoft.com/ru-ru/dotnet/csharp/ – 24.05.2024 р.
2. ASP.NET [Електронний ресурс] – Режим доступу до ресурсу: https://learn.microsoft.com/ru-ru/aspnet/overview – 24.05.2024 р.
3. Entity Framework [Електронний ресурс] – Режим доступу до ресурсу: https://metanit.com/sharp/entityframeworkcore/ - 24.05.2024 р.
4. MS SQL [Електронний ресурс] – Режим доступу до ресурсу: https://www.microsoft.com/ru-ru/sql-server/sql-server-downloads - 24.05.2024 р.
5. React.js [Електронний ресурс] – Режим доступу до ресурсу: https://ru.legacy.reactjs.org/ - 24.05.2024 р.
6. TypeScript [Електронний ресурс] – Режим доступу до ресурсу: https://www.typescriptlang.org/docs/handbook/react.html – 24.05.2024 р.
7. i18n [Електронний ресурс] – Режим доступу до ресурсу: https://www.i18next.com/ - 24.05.2024 р.
8. MobX [Електронний ресурс] – Режим доступу до ресурсу: https://mobx.js.org/README.html – 24.05.2024 р.
9. WinForms [Електронний ресурс] – Режим доступу до ресурсу: https://metanit.com/sharp/windowsforms/1.1.php – 24.05.2024 р.
 
ДОДАТОК А
Функції серверної частини


А.1 метод GetFilterSpecification для організації обліку


1	public override ISpecification<Product> GetFilterSpecification()
2	{
3	var lowerSearchString = SearchString?.ToLower();
4	var search = new FilterSpecification<Product>(product => string.IsNullOrEmpty(lowerSearchString) ||
5	product.Name.ToLower().Contains(lowerSearchString) ||
6	product.TrackNumber.ToLower().Contains(lowerSearchString ||
7	product.Article.ToLower().Contains(lowerSearchString) ||
8	product.Location.ToLower().Contains(lowerSearchString) ||
9	product.Description.ToLower().Contains(lowerSearchString));
10	var filter = new FilterSpecification<Product>(product =>
11	(MinEditionDate == null || product.EditionDate >= MinEditionDate) &&
12	(MaxEditionDate == null || product.EditionDate <= MaxEditionDate) &&
13	product.PurchasePrice >= MinPurchasePrice &&
14	product.PurchasePrice <= MaxPurchasePrice &&
15	product.SalePrice >= MinSalePrice && product.SalePrice <= MaxSalePrice &&
16	(CategoryIdes == null || product.Categories.Any(c => CategoryIdes.Contains(c.Id) || CategoryIdes.Any(i => i == c.ParentCategoryId))) &&
17	(SiteIdes == null || product.Sites.Any(c => SiteIdes.Contains(c.Id))));
18	var publishedFilter = PublishedFilter == BoolFilter.All ?
19	new FilterSpecification<Product>(_ => true) :
20	PublishedFilter == BoolFilter.True ?
21	new FilterSpecification<Product>(product => product.Published) :
22	new FilterSpecification<Product>(product => !product.Published);
23	var saledFilter = IsSaled == BoolFilter.All ?
24	new FilterSpecification<Product>(_ => true) :
25	IsSaled == BoolFilter.True ?
26	new FilterSpecification<Product>(product => product.IsSaled) :
27	new FilterSpecification<Product>(product => !product.IsSaled);
28	var boolFilters = new AndSpecification<Product>(saledFilter, publishedFilter);
29	return new AndSpecification<Product>(boolFilters, new AndSpecification<Product>(filter, search));
30	}


А.2 метод GetFilterSpecification для клієнтів


1	public override ISpecification<Product> GetFilterSpecification() {
2	var lowerSearchString = SearchString?.ToLower();
3	var search = new FilterSpecification<Product>(product => string.IsNullOrEmpty(lowerSearchString) ||
4	product.Name.ToLower().Contains(lowerSearchString)
5	|| product.Article.ToLower().Contains(lowerSearchString) ||
6	product.Description.ToLower().Contains(lowerSearchString));
7	var filter = new FilterSpecification<Product>(product => product.Published && !product.IsSaled &&
8	(CategoryIdes == null || product.Categories.Any(c => CategoryIdes.Contains(c.Id) || CategoryIdes.Any(i => i == c.ParentCategoryId))));
9	
10	return new AndSpecification<Product>(filter, search);
11	}


А.3 метод Execute


1	public async Task<PageResponse<T>> Execute(IQueryable<T> query)
2	{
3	return new PageResponse<T>()
4	{
5	ItemsCount = await GetOrderSpecification()
6	.Specify(GetFilterSpecification().Specify(query)).CountAsync(),
7	PageItems = await GetPaginationSpecification()
8	.Specify(GetOrderSpecification()
9	.Specify(GetFilterSpecification().Specify(query))).ToListAsync() }; } 
ДОДАТОК Б
Функції клієнтської частини


А.1 Функція конвертації convertImageLinkIntoFile


1	export const convertImageLinkIntoFile = async (imageUrl:string, fileName:string):Promise<File | undefined> =>
2	{
3	try {
4	const response = await fetch(imageUrl);
5	const blob = await response.blob();
6	return new File([blob], fileName);
7	} catch (error) {
8	console.error('Error fetching or creating File:', error);
9	return undefined;
10	}
11	}


А.2 Функція getCategoryFullName


1	export const getCategoryFullName = (category: ICategory): string => {
2	if (!category.parentCategory) {
3	return JSON.parse(category.name)[languages.ua.title];
4	}
5	const parentFullName = getCategoryFullName(category.parentCategory);
6	return `${JSON.parse(category.name)[languages.ua.title]} (${parentFullName})`;
7	};




